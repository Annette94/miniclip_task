%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.26.4
-module(dynamodbtask_pb).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3]).
-export([verify_msg/1, verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_set_response.error_t'/1, 'enum_value_by_symbol_set_response.error_t'/1]).
-export(['enum_symbol_by_value_get_response.error_t'/1, 'enum_value_by_symbol_get_response.error_t'/1]).
-export(['enum_symbol_by_value_req_envelope.msg_type'/1, 'enum_value_by_symbol_req_envelope.msg_type'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("dynamodbtask_pb.hrl").
-include("gpb.hrl").

%% enumerated types
-type 'set_response.error_t'() :: 'ok' | 'internal'.
-type 'get_response.error_t'() :: 'ok' | 'not_found' | 'internal'.
-type 'req_envelope.msg_type'() :: 'set_request_t' | 'set_response_t' | 'get_request_t' | 'get_response_t'.
-export_type(['set_response.error_t'/0, 'get_response.error_t'/0, 'req_envelope.msg_type'/0]).

%% message types
-type data() :: #data{}.
-type get_response() :: #get_response{}.
-type get_request() :: #get_request{}.
-type set_response() :: #set_response{}.
-type set_request() :: #set_request{}.
-type req_envelope() :: #req_envelope{}.
-export_type(['data'/0, 'get_response'/0, 'get_request'/0, 'set_response'/0, 'set_request'/0, 'req_envelope'/0]).


-spec encode_msg(_) -> binary().
encode_msg(Msg) -> encode_msg(Msg, []).


-spec encode_msg(_, list()) -> binary().
encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #data{} -> e_msg_data(Msg, TrUserData);
      #get_response{} -> e_msg_get_response(Msg, TrUserData);
      #get_request{} -> e_msg_get_request(Msg, TrUserData);
      #set_response{} -> e_msg_set_response(Msg, TrUserData);
      #set_request{} -> e_msg_set_request(Msg, TrUserData);
      #req_envelope{} -> e_msg_req_envelope(Msg, TrUserData)
    end.



e_msg_data(Msg, TrUserData) ->
    e_msg_data(Msg, <<>>, TrUserData).


e_msg_data(#data{key = F1, value = F2}, Bin,
	   TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_string(TrF2, <<B1/binary, 18>>)
    end.

e_msg_get_response(Msg, TrUserData) ->
    e_msg_get_response(Msg, <<>>, TrUserData).


e_msg_get_response(#get_response{error = F1, req = F2},
		   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   'e_enum_get_response.error_t'(TrF1, <<Bin/binary, 8>>)
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     e_mfield_get_response_req(TrF2, <<B1/binary, 18>>,
				       TrUserData)
	   end
    end.

e_msg_get_request(Msg, TrUserData) ->
    e_msg_get_request(Msg, <<>>, TrUserData).


e_msg_get_request(#get_request{key = F1}, Bin,
		  TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_string(TrF1, <<Bin/binary, 10>>)
    end.

e_msg_set_response(Msg, TrUserData) ->
    e_msg_set_response(Msg, <<>>, TrUserData).


e_msg_set_response(#set_response{error = F1}, Bin,
		   TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      'e_enum_set_response.error_t'(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_set_request(Msg, TrUserData) ->
    e_msg_set_request(Msg, <<>>, TrUserData).


e_msg_set_request(#set_request{req = F1}, Bin,
		  TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_mfield_set_request_req(TrF1, <<Bin/binary, 10>>,
			       TrUserData)
    end.

e_msg_req_envelope(Msg, TrUserData) ->
    e_msg_req_envelope(Msg, <<>>, TrUserData).


e_msg_req_envelope(#req_envelope{type = F1,
				 set_req = F2, set_resp = F3, get_req = F4,
				 get_resp = F5},
		   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   'e_enum_req_envelope.msg_type'(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_mfield_req_envelope_set_req(TrF2, <<B1/binary, 18>>,
						TrUserData)
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_mfield_req_envelope_set_resp(TrF3, <<B2/binary, 26>>,
						 TrUserData)
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_mfield_req_envelope_get_req(TrF4, <<B3/binary, 34>>,
						TrUserData)
		end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     e_mfield_req_envelope_get_resp(TrF5, <<B4/binary, 42>>,
					    TrUserData)
	   end
    end.

e_mfield_get_response_req(Msg, Bin, TrUserData) ->
    SubBin = e_msg_data(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_set_request_req(Msg, Bin, TrUserData) ->
    SubBin = e_msg_data(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_req_envelope_set_req(Msg, Bin, TrUserData) ->
    SubBin = e_msg_set_request(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_req_envelope_set_resp(Msg, Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 2>>,
    e_msg_set_response(Msg, Bin2, TrUserData).

e_mfield_req_envelope_get_req(Msg, Bin, TrUserData) ->
    SubBin = e_msg_get_request(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_req_envelope_get_resp(Msg, Bin, TrUserData) ->
    SubBin = e_msg_get_response(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.



'e_enum_set_response.error_t'(ok, Bin) ->
    <<Bin/binary, 1>>;
'e_enum_set_response.error_t'(internal, Bin) ->
    <<Bin/binary, 2>>;
'e_enum_set_response.error_t'(V, Bin) ->
    e_varint(V, Bin).

'e_enum_get_response.error_t'(ok, Bin) ->
    <<Bin/binary, 1>>;
'e_enum_get_response.error_t'(not_found, Bin) ->
    <<Bin/binary, 2>>;
'e_enum_get_response.error_t'(internal, Bin) ->
    <<Bin/binary, 3>>;
'e_enum_get_response.error_t'(V, Bin) ->
    e_varint(V, Bin).

'e_enum_req_envelope.msg_type'(set_request_t, Bin) ->
    <<Bin/binary, 1>>;
'e_enum_req_envelope.msg_type'(set_response_t, Bin) ->
    <<Bin/binary, 2>>;
'e_enum_req_envelope.msg_type'(get_request_t, Bin) ->
    <<Bin/binary, 3>>;
'e_enum_req_envelope.msg_type'(get_response_t, Bin) ->
    <<Bin/binary, 4>>;
'e_enum_req_envelope.msg_type'(V, Bin) ->
    e_varint(V, Bin).

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).



decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      data -> d_msg_data(Bin, TrUserData);
      get_response -> d_msg_get_response(Bin, TrUserData);
      get_request -> d_msg_get_request(Bin, TrUserData);
      set_response -> d_msg_set_response(Bin, TrUserData);
      set_request -> d_msg_set_request(Bin, TrUserData);
      req_envelope -> d_msg_req_envelope(Bin, TrUserData)
    end.



d_msg_data(Bin, TrUserData) ->
    dfp_read_field_def_data(Bin, 0, 0,
			    id(undefined, TrUserData),
			    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_data(<<10, Rest/binary>>, Z1, Z2, F1,
			F2, TrUserData) ->
    d_field_data_key(Rest, Z1, Z2, F1, F2, TrUserData);
dfp_read_field_def_data(<<18, Rest/binary>>, Z1, Z2, F1,
			F2, TrUserData) ->
    d_field_data_value(Rest, Z1, Z2, F1, F2, TrUserData);
dfp_read_field_def_data(<<>>, 0, 0, F1, F2, _) ->
    #data{key = F1, value = F2};
dfp_read_field_def_data(Other, Z1, Z2, F1, F2,
			TrUserData) ->
    dg_read_field_def_data(Other, Z1, Z2, F1, F2,
			   TrUserData).

dg_read_field_def_data(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_data(Rest, N + 7, X bsl N + Acc, F1,
			   F2, TrUserData);
dg_read_field_def_data(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_data_key(Rest, 0, 0, F1, F2, TrUserData);
      18 ->
	  d_field_data_value(Rest, 0, 0, F1, F2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_data(Rest, 0, 0, F1, F2, TrUserData);
	    1 -> skip_64_data(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_data(Rest, 0, 0, F1, F2,
					   TrUserData);
	    5 -> skip_32_data(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_data(<<>>, 0, 0, F1, F2, _) ->
    #data{key = F1, value = F2}.

d_field_data_key(<<1:1, X:7, Rest/binary>>, N, Acc, F1,
		 F2, TrUserData)
    when N < 57 ->
    d_field_data_key(Rest, N + 7, X bsl N + Acc, F1, F2,
		     TrUserData);
d_field_data_key(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		 F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_data(Rest2, 0, 0, NewFValue, F2,
			    TrUserData).


d_field_data_value(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F1, F2, TrUserData)
    when N < 57 ->
    d_field_data_value(Rest, N + 7, X bsl N + Acc, F1, F2,
		       TrUserData);
d_field_data_value(<<0:1, X:7, Rest/binary>>, N, Acc,
		   F1, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_data(Rest2, 0, 0, F1, NewFValue,
			    TrUserData).


skip_varint_data(<<1:1, _:7, Rest/binary>>, Z1, Z2, F1,
		 F2, TrUserData) ->
    skip_varint_data(Rest, Z1, Z2, F1, F2, TrUserData);
skip_varint_data(<<0:1, _:7, Rest/binary>>, Z1, Z2, F1,
		 F2, TrUserData) ->
    dfp_read_field_def_data(Rest, Z1, Z2, F1, F2,
			    TrUserData).


skip_length_delimited_data(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_data(Rest, N + 7, X bsl N + Acc,
			       F1, F2, TrUserData);
skip_length_delimited_data(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_data(Rest2, 0, 0, F1, F2,
			    TrUserData).


skip_32_data(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
	     TrUserData) ->
    dfp_read_field_def_data(Rest, Z1, Z2, F1, F2,
			    TrUserData).


skip_64_data(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
	     TrUserData) ->
    dfp_read_field_def_data(Rest, Z1, Z2, F1, F2,
			    TrUserData).


d_msg_get_response(Bin, TrUserData) ->
    dfp_read_field_def_get_response(Bin, 0, 0,
				    id(undefined, TrUserData),
				    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_get_response(<<8, Rest/binary>>, Z1,
				Z2, F1, F2, TrUserData) ->
    d_field_get_response_error(Rest, Z1, Z2, F1, F2,
			       TrUserData);
dfp_read_field_def_get_response(<<18, Rest/binary>>, Z1,
				Z2, F1, F2, TrUserData) ->
    d_field_get_response_req(Rest, Z1, Z2, F1, F2,
			     TrUserData);
dfp_read_field_def_get_response(<<>>, 0, 0, F1, F2,
				_) ->
    #get_response{error = F1, req = F2};
dfp_read_field_def_get_response(Other, Z1, Z2, F1, F2,
				TrUserData) ->
    dg_read_field_def_get_response(Other, Z1, Z2, F1, F2,
				   TrUserData).

dg_read_field_def_get_response(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_get_response(Rest, N + 7,
				   X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_get_response(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_get_response_error(Rest, 0, 0, F1, F2,
				     TrUserData);
      18 ->
	  d_field_get_response_req(Rest, 0, 0, F1, F2,
				   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_get_response(Rest, 0, 0, F1, F2,
					 TrUserData);
	    1 ->
		skip_64_get_response(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_get_response(Rest, 0, 0, F1, F2,
						   TrUserData);
	    5 ->
		skip_32_get_response(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_get_response(<<>>, 0, 0, F1, F2, _) ->
    #get_response{error = F1, req = F2}.

d_field_get_response_error(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_get_response_error(Rest, N + 7, X bsl N + Acc,
			       F1, F2, TrUserData);
d_field_get_response_error(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F2, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_get_response.error_t'(Tmp),
    dfp_read_field_def_get_response(Rest, 0, 0, NewFValue,
				    F2, TrUserData).


d_field_get_response_req(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_get_response_req(Rest, N + 7, X bsl N + Acc, F1,
			     F2, TrUserData);
d_field_get_response_req(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_data(Bs, TrUserData), TrUserData),
    dfp_read_field_def_get_response(Rest2, 0, 0, F1,
				    if F2 == undefined -> NewFValue;
				       true ->
					   merge_msg_data(F2, NewFValue,
							  TrUserData)
				    end,
				    TrUserData).


skip_varint_get_response(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, TrUserData) ->
    skip_varint_get_response(Rest, Z1, Z2, F1, F2,
			     TrUserData);
skip_varint_get_response(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_get_response(Rest, Z1, Z2, F1, F2,
				    TrUserData).


skip_length_delimited_get_response(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_get_response(Rest, N + 7,
				       X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_get_response(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_get_response(Rest2, 0, 0, F1, F2,
				    TrUserData).


skip_32_get_response(<<_:32, Rest/binary>>, Z1, Z2, F1,
		     F2, TrUserData) ->
    dfp_read_field_def_get_response(Rest, Z1, Z2, F1, F2,
				    TrUserData).


skip_64_get_response(<<_:64, Rest/binary>>, Z1, Z2, F1,
		     F2, TrUserData) ->
    dfp_read_field_def_get_response(Rest, Z1, Z2, F1, F2,
				    TrUserData).


d_msg_get_request(Bin, TrUserData) ->
    dfp_read_field_def_get_request(Bin, 0, 0,
				   id(undefined, TrUserData), TrUserData).

dfp_read_field_def_get_request(<<10, Rest/binary>>, Z1,
			       Z2, F1, TrUserData) ->
    d_field_get_request_key(Rest, Z1, Z2, F1, TrUserData);
dfp_read_field_def_get_request(<<>>, 0, 0, F1, _) ->
    #get_request{key = F1};
dfp_read_field_def_get_request(Other, Z1, Z2, F1,
			       TrUserData) ->
    dg_read_field_def_get_request(Other, Z1, Z2, F1,
				  TrUserData).

dg_read_field_def_get_request(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_get_request(Rest, N + 7,
				  X bsl N + Acc, F1, TrUserData);
dg_read_field_def_get_request(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_get_request_key(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_get_request(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_get_request(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_get_request(Rest, 0, 0, F1,
						  TrUserData);
	    5 -> skip_32_get_request(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_get_request(<<>>, 0, 0, F1, _) ->
    #get_request{key = F1}.

d_field_get_request_key(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, TrUserData)
    when N < 57 ->
    d_field_get_request_key(Rest, N + 7, X bsl N + Acc, F1,
			    TrUserData);
d_field_get_request_key(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_get_request(Rest2, 0, 0, NewFValue,
				   TrUserData).


skip_varint_get_request(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F1, TrUserData) ->
    skip_varint_get_request(Rest, Z1, Z2, F1, TrUserData);
skip_varint_get_request(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F1, TrUserData) ->
    dfp_read_field_def_get_request(Rest, Z1, Z2, F1,
				   TrUserData).


skip_length_delimited_get_request(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_get_request(Rest, N + 7,
				      X bsl N + Acc, F1, TrUserData);
skip_length_delimited_get_request(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_get_request(Rest2, 0, 0, F1,
				   TrUserData).


skip_32_get_request(<<_:32, Rest/binary>>, Z1, Z2, F1,
		    TrUserData) ->
    dfp_read_field_def_get_request(Rest, Z1, Z2, F1,
				   TrUserData).


skip_64_get_request(<<_:64, Rest/binary>>, Z1, Z2, F1,
		    TrUserData) ->
    dfp_read_field_def_get_request(Rest, Z1, Z2, F1,
				   TrUserData).


d_msg_set_response(Bin, TrUserData) ->
    dfp_read_field_def_set_response(Bin, 0, 0,
				    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_set_response(<<8, Rest/binary>>, Z1,
				Z2, F1, TrUserData) ->
    d_field_set_response_error(Rest, Z1, Z2, F1,
			       TrUserData);
dfp_read_field_def_set_response(<<>>, 0, 0, F1, _) ->
    #set_response{error = F1};
dfp_read_field_def_set_response(Other, Z1, Z2, F1,
				TrUserData) ->
    dg_read_field_def_set_response(Other, Z1, Z2, F1,
				   TrUserData).

dg_read_field_def_set_response(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_set_response(Rest, N + 7,
				   X bsl N + Acc, F1, TrUserData);
dg_read_field_def_set_response(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_set_response_error(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_set_response(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_set_response(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_set_response(Rest, 0, 0, F1,
						   TrUserData);
	    5 -> skip_32_set_response(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_set_response(<<>>, 0, 0, F1, _) ->
    #set_response{error = F1}.

d_field_set_response_error(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, TrUserData)
    when N < 57 ->
    d_field_set_response_error(Rest, N + 7, X bsl N + Acc,
			       F1, TrUserData);
d_field_set_response_error(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_set_response.error_t'(Tmp),
    dfp_read_field_def_set_response(Rest, 0, 0, NewFValue,
				    TrUserData).


skip_varint_set_response(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, TrUserData) ->
    skip_varint_set_response(Rest, Z1, Z2, F1, TrUserData);
skip_varint_set_response(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, TrUserData) ->
    dfp_read_field_def_set_response(Rest, Z1, Z2, F1,
				    TrUserData).


skip_length_delimited_set_response(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_set_response(Rest, N + 7,
				       X bsl N + Acc, F1, TrUserData);
skip_length_delimited_set_response(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_set_response(Rest2, 0, 0, F1,
				    TrUserData).


skip_32_set_response(<<_:32, Rest/binary>>, Z1, Z2, F1,
		     TrUserData) ->
    dfp_read_field_def_set_response(Rest, Z1, Z2, F1,
				    TrUserData).


skip_64_set_response(<<_:64, Rest/binary>>, Z1, Z2, F1,
		     TrUserData) ->
    dfp_read_field_def_set_response(Rest, Z1, Z2, F1,
				    TrUserData).


d_msg_set_request(Bin, TrUserData) ->
    dfp_read_field_def_set_request(Bin, 0, 0,
				   id(undefined, TrUserData), TrUserData).

dfp_read_field_def_set_request(<<10, Rest/binary>>, Z1,
			       Z2, F1, TrUserData) ->
    d_field_set_request_req(Rest, Z1, Z2, F1, TrUserData);
dfp_read_field_def_set_request(<<>>, 0, 0, F1, _) ->
    #set_request{req = F1};
dfp_read_field_def_set_request(Other, Z1, Z2, F1,
			       TrUserData) ->
    dg_read_field_def_set_request(Other, Z1, Z2, F1,
				  TrUserData).

dg_read_field_def_set_request(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_set_request(Rest, N + 7,
				  X bsl N + Acc, F1, TrUserData);
dg_read_field_def_set_request(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_set_request_req(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_set_request(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_set_request(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_set_request(Rest, 0, 0, F1,
						  TrUserData);
	    5 -> skip_32_set_request(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_set_request(<<>>, 0, 0, F1, _) ->
    #set_request{req = F1}.

d_field_set_request_req(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, TrUserData)
    when N < 57 ->
    d_field_set_request_req(Rest, N + 7, X bsl N + Acc, F1,
			    TrUserData);
d_field_set_request_req(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_data(Bs, TrUserData), TrUserData),
    dfp_read_field_def_set_request(Rest2, 0, 0,
				   if F1 == undefined -> NewFValue;
				      true ->
					  merge_msg_data(F1, NewFValue,
							 TrUserData)
				   end,
				   TrUserData).


skip_varint_set_request(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F1, TrUserData) ->
    skip_varint_set_request(Rest, Z1, Z2, F1, TrUserData);
skip_varint_set_request(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F1, TrUserData) ->
    dfp_read_field_def_set_request(Rest, Z1, Z2, F1,
				   TrUserData).


skip_length_delimited_set_request(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_set_request(Rest, N + 7,
				      X bsl N + Acc, F1, TrUserData);
skip_length_delimited_set_request(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_set_request(Rest2, 0, 0, F1,
				   TrUserData).


skip_32_set_request(<<_:32, Rest/binary>>, Z1, Z2, F1,
		    TrUserData) ->
    dfp_read_field_def_set_request(Rest, Z1, Z2, F1,
				   TrUserData).


skip_64_set_request(<<_:64, Rest/binary>>, Z1, Z2, F1,
		    TrUserData) ->
    dfp_read_field_def_set_request(Rest, Z1, Z2, F1,
				   TrUserData).


d_msg_req_envelope(Bin, TrUserData) ->
    dfp_read_field_def_req_envelope(Bin, 0, 0,
				    id(undefined, TrUserData),
				    id(undefined, TrUserData),
				    id(undefined, TrUserData),
				    id(undefined, TrUserData),
				    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_req_envelope(<<8, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_req_envelope_type(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, TrUserData);
dfp_read_field_def_req_envelope(<<18, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_req_envelope_set_req(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, TrUserData);
dfp_read_field_def_req_envelope(<<26, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_req_envelope_set_resp(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, TrUserData);
dfp_read_field_def_req_envelope(<<34, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_req_envelope_get_req(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, TrUserData);
dfp_read_field_def_req_envelope(<<42, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_req_envelope_get_resp(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, TrUserData);
dfp_read_field_def_req_envelope(<<>>, 0, 0, F1, F2, F3,
				F4, F5, _) ->
    #req_envelope{type = F1, set_req = F2, set_resp = F3,
		  get_req = F4, get_resp = F5};
dfp_read_field_def_req_envelope(Other, Z1, Z2, F1, F2,
				F3, F4, F5, TrUserData) ->
    dg_read_field_def_req_envelope(Other, Z1, Z2, F1, F2,
				   F3, F4, F5, TrUserData).

dg_read_field_def_req_envelope(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_req_envelope(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5,
				   TrUserData);
dg_read_field_def_req_envelope(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_req_envelope_type(Rest, 0, 0, F1, F2, F3, F4,
				    F5, TrUserData);
      18 ->
	  d_field_req_envelope_set_req(Rest, 0, 0, F1, F2, F3, F4,
				       F5, TrUserData);
      26 ->
	  d_field_req_envelope_set_resp(Rest, 0, 0, F1, F2, F3,
					F4, F5, TrUserData);
      34 ->
	  d_field_req_envelope_get_req(Rest, 0, 0, F1, F2, F3, F4,
				       F5, TrUserData);
      42 ->
	  d_field_req_envelope_get_resp(Rest, 0, 0, F1, F2, F3,
					F4, F5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_req_envelope(Rest, 0, 0, F1, F2, F3, F4, F5,
					 TrUserData);
	    1 ->
		skip_64_req_envelope(Rest, 0, 0, F1, F2, F3, F4, F5,
				     TrUserData);
	    2 ->
		skip_length_delimited_req_envelope(Rest, 0, 0, F1, F2,
						   F3, F4, F5, TrUserData);
	    5 ->
		skip_32_req_envelope(Rest, 0, 0, F1, F2, F3, F4, F5,
				     TrUserData)
	  end
    end;
dg_read_field_def_req_envelope(<<>>, 0, 0, F1, F2, F3,
			       F4, F5, _) ->
    #req_envelope{type = F1, set_req = F2, set_resp = F3,
		  get_req = F4, get_resp = F5}.

d_field_req_envelope_type(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_req_envelope_type(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, TrUserData);
d_field_req_envelope_type(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F2, F3, F4, F5, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_req_envelope.msg_type'(Tmp),
    dfp_read_field_def_req_envelope(Rest, 0, 0, NewFValue,
				    F2, F3, F4, F5, TrUserData).


d_field_req_envelope_set_req(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_req_envelope_set_req(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, TrUserData);
d_field_req_envelope_set_req(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_set_request(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_req_envelope(Rest2, 0, 0, F1,
				    if F2 == undefined -> NewFValue;
				       true ->
					   merge_msg_set_request(F2, NewFValue,
								 TrUserData)
				    end,
				    F3, F4, F5, TrUserData).


d_field_req_envelope_set_resp(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_req_envelope_set_resp(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5,
				  TrUserData);
d_field_req_envelope_set_resp(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_set_response(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_req_envelope(Rest2, 0, 0, F1, F2,
				    if F3 == undefined -> NewFValue;
				       true ->
					   merge_msg_set_response(F3, NewFValue,
								  TrUserData)
				    end,
				    F4, F5, TrUserData).


d_field_req_envelope_get_req(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_req_envelope_get_req(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, TrUserData);
d_field_req_envelope_get_req(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_get_request(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_req_envelope(Rest2, 0, 0, F1, F2, F3,
				    if F4 == undefined -> NewFValue;
				       true ->
					   merge_msg_get_request(F4, NewFValue,
								 TrUserData)
				    end,
				    F5, TrUserData).


d_field_req_envelope_get_resp(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_req_envelope_get_resp(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5,
				  TrUserData);
d_field_req_envelope_get_resp(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_get_response(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_req_envelope(Rest2, 0, 0, F1, F2, F3,
				    F4,
				    if F5 == undefined -> NewFValue;
				       true ->
					   merge_msg_get_response(F5, NewFValue,
								  TrUserData)
				    end,
				    TrUserData).


skip_varint_req_envelope(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, F3, F4, F5, TrUserData) ->
    skip_varint_req_envelope(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, TrUserData);
skip_varint_req_envelope(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_req_envelope(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, TrUserData).


skip_length_delimited_req_envelope(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    skip_length_delimited_req_envelope(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5,
				       TrUserData);
skip_length_delimited_req_envelope(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_req_envelope(Rest2, 0, 0, F1, F2, F3,
				    F4, F5, TrUserData).


skip_32_req_envelope(<<_:32, Rest/binary>>, Z1, Z2, F1,
		     F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_req_envelope(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, TrUserData).


skip_64_req_envelope(<<_:64, Rest/binary>>, Z1, Z2, F1,
		     F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_req_envelope(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, TrUserData).




'd_enum_set_response.error_t'(1) -> ok;
'd_enum_set_response.error_t'(2) -> internal;
'd_enum_set_response.error_t'(V) -> V.

'd_enum_get_response.error_t'(1) -> ok;
'd_enum_get_response.error_t'(2) -> not_found;
'd_enum_get_response.error_t'(3) -> internal;
'd_enum_get_response.error_t'(V) -> V.

'd_enum_req_envelope.msg_type'(1) -> set_request_t;
'd_enum_req_envelope.msg_type'(2) -> set_response_t;
'd_enum_req_envelope.msg_type'(3) -> get_request_t;
'd_enum_req_envelope.msg_type'(4) -> get_response_t;
'd_enum_req_envelope.msg_type'(V) -> V.



merge_msgs(Prev, New) -> merge_msgs(Prev, New, []).

merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Prev of
      #data{} -> merge_msg_data(Prev, New, TrUserData);
      #get_response{} ->
	  merge_msg_get_response(Prev, New, TrUserData);
      #get_request{} ->
	  merge_msg_get_request(Prev, New, TrUserData);
      #set_response{} ->
	  merge_msg_set_response(Prev, New, TrUserData);
      #set_request{} ->
	  merge_msg_set_request(Prev, New, TrUserData);
      #req_envelope{} ->
	  merge_msg_req_envelope(Prev, New, TrUserData)
    end.

merge_msg_data(#data{},
	       #data{key = NFkey, value = NFvalue}, _) ->
    #data{key = NFkey, value = NFvalue}.

merge_msg_get_response(#get_response{req = PFreq},
		       #get_response{error = NFerror, req = NFreq},
		       TrUserData) ->
    #get_response{error = NFerror,
		  req =
		      if PFreq /= undefined, NFreq /= undefined ->
			     merge_msg_data(PFreq, NFreq, TrUserData);
			 PFreq == undefined -> NFreq;
			 NFreq == undefined -> PFreq
		      end}.

merge_msg_get_request(#get_request{},
		      #get_request{key = NFkey}, _) ->
    #get_request{key = NFkey}.

merge_msg_set_response(#set_response{},
		       #set_response{error = NFerror}, _) ->
    #set_response{error = NFerror}.

merge_msg_set_request(#set_request{req = PFreq},
		      #set_request{req = NFreq}, TrUserData) ->
    #set_request{req =
		     if PFreq /= undefined, NFreq /= undefined ->
			    merge_msg_data(PFreq, NFreq, TrUserData);
			PFreq == undefined -> NFreq;
			NFreq == undefined -> PFreq
		     end}.

merge_msg_req_envelope(#req_envelope{set_req =
					 PFset_req,
				     set_resp = PFset_resp, get_req = PFget_req,
				     get_resp = PFget_resp},
		       #req_envelope{type = NFtype, set_req = NFset_req,
				     set_resp = NFset_resp, get_req = NFget_req,
				     get_resp = NFget_resp},
		       TrUserData) ->
    #req_envelope{type = NFtype,
		  set_req =
		      if PFset_req /= undefined, NFset_req /= undefined ->
			     merge_msg_set_request(PFset_req, NFset_req,
						   TrUserData);
			 PFset_req == undefined -> NFset_req;
			 NFset_req == undefined -> PFset_req
		      end,
		  set_resp =
		      if PFset_resp /= undefined, NFset_resp /= undefined ->
			     merge_msg_set_response(PFset_resp, NFset_resp,
						    TrUserData);
			 PFset_resp == undefined -> NFset_resp;
			 NFset_resp == undefined -> PFset_resp
		      end,
		  get_req =
		      if PFget_req /= undefined, NFget_req /= undefined ->
			     merge_msg_get_request(PFget_req, NFget_req,
						   TrUserData);
			 PFget_req == undefined -> NFget_req;
			 NFget_req == undefined -> PFget_req
		      end,
		  get_resp =
		      if PFget_resp /= undefined, NFget_resp /= undefined ->
			     merge_msg_get_response(PFget_resp, NFget_resp,
						    TrUserData);
			 PFget_resp == undefined -> NFget_resp;
			 NFget_resp == undefined -> PFget_resp
		      end}.



verify_msg(Msg) -> verify_msg(Msg, []).

verify_msg(Msg, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #data{} -> v_msg_data(Msg, [data], TrUserData);
      #get_response{} ->
	  v_msg_get_response(Msg, [get_response], TrUserData);
      #get_request{} ->
	  v_msg_get_request(Msg, [get_request], TrUserData);
      #set_response{} ->
	  v_msg_set_response(Msg, [set_response], TrUserData);
      #set_request{} ->
	  v_msg_set_request(Msg, [set_request], TrUserData);
      #req_envelope{} ->
	  v_msg_req_envelope(Msg, [req_envelope], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_data/3}).
v_msg_data(#data{key = F1, value = F2}, Path, _) ->
    v_type_string(F1, [key | Path]),
    v_type_string(F2, [value | Path]),
    ok;
v_msg_data(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, data}, X, Path).

-dialyzer({nowarn_function,v_msg_get_response/3}).
v_msg_get_response(#get_response{error = F1, req = F2},
		   Path, TrUserData) ->
    'v_enum_get_response.error_t'(F1, [error | Path]),
    if F2 == undefined -> ok;
       true -> v_msg_data(F2, [req | Path], TrUserData)
    end,
    ok;
v_msg_get_response(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, get_response}, X, Path).

-dialyzer({nowarn_function,v_msg_get_request/3}).
v_msg_get_request(#get_request{key = F1}, Path, _) ->
    v_type_string(F1, [key | Path]), ok;
v_msg_get_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, get_request}, X, Path).

-dialyzer({nowarn_function,v_msg_set_response/3}).
v_msg_set_response(#set_response{error = F1}, Path,
		   _) ->
    'v_enum_set_response.error_t'(F1, [error | Path]), ok;
v_msg_set_response(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, set_response}, X, Path).

-dialyzer({nowarn_function,v_msg_set_request/3}).
v_msg_set_request(#set_request{req = F1}, Path,
		  TrUserData) ->
    v_msg_data(F1, [req | Path], TrUserData), ok;
v_msg_set_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, set_request}, X, Path).

-dialyzer({nowarn_function,v_msg_req_envelope/3}).
v_msg_req_envelope(#req_envelope{type = F1,
				 set_req = F2, set_resp = F3, get_req = F4,
				 get_resp = F5},
		   Path, TrUserData) ->
    'v_enum_req_envelope.msg_type'(F1, [type | Path]),
    if F2 == undefined -> ok;
       true ->
	   v_msg_set_request(F2, [set_req | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_msg_set_response(F3, [set_resp | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
	   v_msg_get_request(F4, [get_req | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true ->
	   v_msg_get_response(F5, [get_resp | Path], TrUserData)
    end,
    ok.

-dialyzer({nowarn_function,'v_enum_set_response.error_t'/2}).
'v_enum_set_response.error_t'(ok, _Path) -> ok;
'v_enum_set_response.error_t'(internal, _Path) -> ok;
'v_enum_set_response.error_t'(V, Path)
    when is_integer(V) ->
    v_type_sint32(V, Path);
'v_enum_set_response.error_t'(X, Path) ->
    mk_type_error({invalid_enum, 'set_response.error_t'}, X,
		  Path).

-dialyzer({nowarn_function,'v_enum_get_response.error_t'/2}).
'v_enum_get_response.error_t'(ok, _Path) -> ok;
'v_enum_get_response.error_t'(not_found, _Path) -> ok;
'v_enum_get_response.error_t'(internal, _Path) -> ok;
'v_enum_get_response.error_t'(V, Path)
    when is_integer(V) ->
    v_type_sint32(V, Path);
'v_enum_get_response.error_t'(X, Path) ->
    mk_type_error({invalid_enum, 'get_response.error_t'}, X,
		  Path).

-dialyzer({nowarn_function,'v_enum_req_envelope.msg_type'/2}).
'v_enum_req_envelope.msg_type'(set_request_t, _Path) ->
    ok;
'v_enum_req_envelope.msg_type'(set_response_t, _Path) ->
    ok;
'v_enum_req_envelope.msg_type'(get_request_t, _Path) ->
    ok;
'v_enum_req_envelope.msg_type'(get_response_t, _Path) ->
    ok;
'v_enum_req_envelope.msg_type'(V, Path)
    when is_integer(V) ->
    v_type_sint32(V, Path);
'v_enum_req_envelope.msg_type'(X, Path) ->
    mk_type_error({invalid_enum, 'req_envelope.msg_type'},
		  X, Path).

-dialyzer({nowarn_function,v_type_sint32/2}).
v_type_sint32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).



-compile({inline,id/2}).
id(X, _TrUserData) -> X.




get_msg_defs() ->
    [{{enum, 'set_response.error_t'},
      [{ok, 1}, {internal, 2}]},
     {{enum, 'get_response.error_t'},
      [{ok, 1}, {not_found, 2}, {internal, 3}]},
     {{enum, 'req_envelope.msg_type'},
      [{set_request_t, 1}, {set_response_t, 2},
       {get_request_t, 3}, {get_response_t, 4}]},
     {{msg, data},
      [#field{name = key, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = value, fnum = 2, rnum = 3, type = string,
	      occurrence = required, opts = []}]},
     {{msg, get_response},
      [#field{name = error, fnum = 1, rnum = 2,
	      type = {enum, 'get_response.error_t'},
	      occurrence = required, opts = []},
       #field{name = req, fnum = 2, rnum = 3,
	      type = {msg, data}, occurrence = optional, opts = []}]},
     {{msg, get_request},
      [#field{name = key, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []}]},
     {{msg, set_response},
      [#field{name = error, fnum = 1, rnum = 2,
	      type = {enum, 'set_response.error_t'},
	      occurrence = required, opts = []}]},
     {{msg, set_request},
      [#field{name = req, fnum = 1, rnum = 2,
	      type = {msg, data}, occurrence = required, opts = []}]},
     {{msg, req_envelope},
      [#field{name = type, fnum = 1, rnum = 2,
	      type = {enum, 'req_envelope.msg_type'},
	      occurrence = required, opts = []},
       #field{name = set_req, fnum = 2, rnum = 3,
	      type = {msg, set_request}, occurrence = optional,
	      opts = []},
       #field{name = set_resp, fnum = 3, rnum = 4,
	      type = {msg, set_response}, occurrence = optional,
	      opts = []},
       #field{name = get_req, fnum = 4, rnum = 5,
	      type = {msg, get_request}, occurrence = optional,
	      opts = []},
       #field{name = get_resp, fnum = 5, rnum = 6,
	      type = {msg, get_response}, occurrence = optional,
	      opts = []}]}].


get_msg_names() ->
    [data, get_response, get_request, set_response,
     set_request, req_envelope].


get_enum_names() ->
    ['set_response.error_t', 'get_response.error_t',
     'req_envelope.msg_type'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def(data) ->
    [#field{name = key, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = value, fnum = 2, rnum = 3, type = string,
	    occurrence = required, opts = []}];
find_msg_def(get_response) ->
    [#field{name = error, fnum = 1, rnum = 2,
	    type = {enum, 'get_response.error_t'},
	    occurrence = required, opts = []},
     #field{name = req, fnum = 2, rnum = 3,
	    type = {msg, data}, occurrence = optional, opts = []}];
find_msg_def(get_request) ->
    [#field{name = key, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []}];
find_msg_def(set_response) ->
    [#field{name = error, fnum = 1, rnum = 2,
	    type = {enum, 'set_response.error_t'},
	    occurrence = required, opts = []}];
find_msg_def(set_request) ->
    [#field{name = req, fnum = 1, rnum = 2,
	    type = {msg, data}, occurrence = required, opts = []}];
find_msg_def(req_envelope) ->
    [#field{name = type, fnum = 1, rnum = 2,
	    type = {enum, 'req_envelope.msg_type'},
	    occurrence = required, opts = []},
     #field{name = set_req, fnum = 2, rnum = 3,
	    type = {msg, set_request}, occurrence = optional,
	    opts = []},
     #field{name = set_resp, fnum = 3, rnum = 4,
	    type = {msg, set_response}, occurrence = optional,
	    opts = []},
     #field{name = get_req, fnum = 4, rnum = 5,
	    type = {msg, get_request}, occurrence = optional,
	    opts = []},
     #field{name = get_resp, fnum = 5, rnum = 6,
	    type = {msg, get_response}, occurrence = optional,
	    opts = []}];
find_msg_def(_) -> error.


find_enum_def('set_response.error_t') ->
    [{ok, 1}, {internal, 2}];
find_enum_def('get_response.error_t') ->
    [{ok, 1}, {not_found, 2}, {internal, 3}];
find_enum_def('req_envelope.msg_type') ->
    [{set_request_t, 1}, {set_response_t, 2},
     {get_request_t, 3}, {get_response_t, 4}];
find_enum_def(_) -> error.


enum_symbol_by_value('set_response.error_t', Value) ->
    'enum_symbol_by_value_set_response.error_t'(Value);
enum_symbol_by_value('get_response.error_t', Value) ->
    'enum_symbol_by_value_get_response.error_t'(Value);
enum_symbol_by_value('req_envelope.msg_type', Value) ->
    'enum_symbol_by_value_req_envelope.msg_type'(Value).


enum_value_by_symbol('set_response.error_t', Sym) ->
    'enum_value_by_symbol_set_response.error_t'(Sym);
enum_value_by_symbol('get_response.error_t', Sym) ->
    'enum_value_by_symbol_get_response.error_t'(Sym);
enum_value_by_symbol('req_envelope.msg_type', Sym) ->
    'enum_value_by_symbol_req_envelope.msg_type'(Sym).


'enum_symbol_by_value_set_response.error_t'(1) -> ok;
'enum_symbol_by_value_set_response.error_t'(2) ->
    internal.


'enum_value_by_symbol_set_response.error_t'(ok) -> 1;
'enum_value_by_symbol_set_response.error_t'(internal) ->
    2.

'enum_symbol_by_value_get_response.error_t'(1) -> ok;
'enum_symbol_by_value_get_response.error_t'(2) ->
    not_found;
'enum_symbol_by_value_get_response.error_t'(3) ->
    internal.


'enum_value_by_symbol_get_response.error_t'(ok) -> 1;
'enum_value_by_symbol_get_response.error_t'(not_found) ->
    2;
'enum_value_by_symbol_get_response.error_t'(internal) ->
    3.

'enum_symbol_by_value_req_envelope.msg_type'(1) ->
    set_request_t;
'enum_symbol_by_value_req_envelope.msg_type'(2) ->
    set_response_t;
'enum_symbol_by_value_req_envelope.msg_type'(3) ->
    get_request_t;
'enum_symbol_by_value_req_envelope.msg_type'(4) ->
    get_response_t.


'enum_value_by_symbol_req_envelope.msg_type'(set_request_t) ->
    1;
'enum_value_by_symbol_req_envelope.msg_type'(set_response_t) ->
    2;
'enum_value_by_symbol_req_envelope.msg_type'(get_request_t) ->
    3;
'enum_value_by_symbol_req_envelope.msg_type'(get_response_t) ->
    4.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> 'kv.proto'.



gpb_version_as_string() ->
    "3.26.4".

gpb_version_as_list() ->
    [3,26,4].
